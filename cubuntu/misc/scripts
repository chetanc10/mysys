// find all .c and .h files recursively and do dos2unix on them 
find . -type f -name *.[cChH] -print0 | xargs -0 dos2unix

// find all pattern match files recursively and delete them 
find . -name "pattern" -delete

// find percentage of battery power available
upower -i /org/freedesktop/UPower/devices/battery_BAT0 | grep "percentage"

// find directory content total size
du -hs path-of-directory

// extract specific string without the text before and after that ( not totally tested )
var=$(echo -n `<script-which-gives-text-with-STRING> | grep "before-STRING" | sed -e 's|before-STRING||; s|after-STRING$||'`)

// get the public IP ur linux machine's identified as
curl -s checkip.dyndns.org|sed -e 's/.*Current IP Address: //' -e 's/<.*$//'
wget -qO- http://ipecho.net/plain ; echo
curl ifconfig.me
wget -qO- ifconfig.me/ip

// get what wifi adapter is used
lspci -nn | grep 0280

// get what wifi APs are available (given without joining any AP)
iwlist wlan0 scan | grep -E "SSID|Channel"

// get total CPU memory (i.e. the RAM)
sudo dmidecode -t 17 | grep "Size.*MB"

// findn endianness of system
lscpu | grep -i byte

// get the number of threads limited in the current system
cat /proc/sys/kernel/threads-max

// get memory allocation trace of a program
gcc -g 1.c -o o; export MALLOC_TRACE=/home/vchn075/ChetaN/Junk/scrap/11; ./o; mtrace ./o $MALLOC_TRACE

// number base format conversions
echo "obase=<required-number-base>; <input number>" | bc

// write to other users
write username [tty]

// find verion or other string-like info from a binary
strings a.out | grep <GCC, GLIB, etc>

// find total number of required pattern-named files
ls -l ./file.* 2>/dev/null | wc -l

// get prio of pid
awk '{print $18}' /proc/<pid>/stat

// get last word from a heterogenous string, coming after a given symbol
echo "/home/vchn075/ChetaN/Junk/scrap/test/c1x" | awk -F/ '{print $NF}'

// cut from mth character to nth character in a string
echo 'MOTEST' | cut -c2-5

// conversion between lower<->upper case bash
echo $VAR_NAME | tr '[:lower:]' '[:upper:]'
echo $str | awk '{print toupper($0)}'

echo $VAR_NAME | tr '[:upper:]' '[:lower:]'
echo $str | awk '{print tolower($0)}'

// disable x-session during bootup
chmod -x /usr/bin/Xorg

// top for particular process
top -p $(pgrep -d , processname)

// free cached pages after closing a memory-monster application
sync && echo 1 > /proc/sys/vm/drop_caches && sync && echo 2 > /proc/sys/vm/drop_caches && sync && echo 3 > /proc/sys/vm/drop_caches

// rename file by replacing spaces in the file-name by another character
rename 's/ /<char>/g' <file>

// rename file by removing '[word]' (enclosed between [])
rename 's/\[.*\]//g' <file>

// find 2nd process on THIS pipe
(find /proc -type l | xargs ls -l | fgrep 'pipe:[THIS]') 2>/dev/null

// download mp3 from youtube video
youtube-dl --extract-audio --audio-format mp3 -l <youtube-link>

// remove remotely deleted branches and sync up on repo management
git fetch -p; git remote prune origin; git branch --merged | grep -v "*" | xargs git branch -d

// get number of cores on your linux
nproc --all
(or)
getconf _NPROCESSORS_ONLN

// use bash-variable to replace a regex pattern using sed
_replacer=$(printf '%s' "$main_replacer_variable" | sed 's/[[\.*/]/\\&/g; s/$$/\\&/; s/^^/\\&/')
sed [-i] [-e] "s/regex/${_replacer}/g" [file or any input]

